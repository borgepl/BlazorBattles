@page "/register"
@inject IUnitService UnitService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject IToastService ToastService

<h3>Register</h3>

@if (ShowRegistrationErrors)
{
    <div>
        @foreach (var error in Errors)
        {
            <p class="text-danger text-center">@error</p>
        }
    </div>
}

<EditForm Model="userVM" OnValidSubmit="HandleRegistration">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="userVM.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => userVM.Email)" />
    </div>
    <div class="mb-3">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="userVM.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => userVM.Username)" />
    </div>
    <div class="mb-3">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="userVM.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => userVM.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="userVM.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => userVM.ConfirmPassword)" />
    </div>
    <div class="mb-3">
        <label for="bio">Bio</label>
        <InputTextArea id="bio" @bind-Value="userVM.Bio" class="form-control"></InputTextArea>
    </div>
    <div class="mb-3">
        <label for="startUnit">Start Unit</label>
        <InputSelect id="startUnit" @bind-Value="userVM.StartUnitId" class="form-select">
            @foreach (var unit in UnitService.Units)
            {
                <option value="@unit.Id">@unit.Title</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="bananas">Bananas</label>
        <InputNumber id="bananas" @bind-Value="userVM.Bananas" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => userVM.Bananas)" />
    </div>
    <div class="mb-3">
        <label for="dateOfBirth">Date of Birth</label>
        <InputDate id="dateOfBirth" @bind-Value="userVM.DateOfBirth" class="form-control"></InputDate>
    </div>
    <div class="form-check">
        <InputCheckbox id="confirmed" @bind-Value="userVM.IsConfirmed" class="form-check-input"></InputCheckbox>
        <label for="confirmed" class="form-check-label">Confirmed</label>
        <ValidationMessage For="@(() => userVM.IsConfirmed)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    UserRegisterDTO userVM = new UserRegisterDTO();
    public IEnumerable<string>? Errors { get; set; }
    public bool IsProcessing { get; set; } = false;
    public bool ShowRegistrationErrors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UnitService.LoadUnitsAsync();
    }

    async void HandleRegistration()
    {
        // Console.WriteLine("Store this new user in the database!");
        // JSRuntime.InvokeVoidAsync("console.log", "This is the great new user:", userVM);
        ShowRegistrationErrors = false;
        IsProcessing = true;

        var result = await AuthService.Register(userVM);
        if (result.IsRegisterationSuccessful)
        {
            IsProcessing = false;
            ToastService.ShowSuccess("Registration successfull");
            NavManager.NavigateTo("login");
        }
        else
        {
            IsProcessing = false;
            ToastService.ShowError($"There were errors.");
            ToastService.ShowError(result.Errors.First());
            
            // Errors can be shown then in view
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }

        

    }
}